@page "/devicedetails/{DeviceId}"
@using BlazorFront.Models
@using ProjektKarolewski.Models
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using System;
@using System.IO;
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@attribute [Authorize(Roles = "Administrator, Manager, User")]



@{
    var SearchTool = new List<string>() { "Add", "Cancel", "Search" };
    System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo("pl");
}

<h1>Urządzenie: @deviceName</h1>

<p>Przeglądy</p>
<SfGrid @ref="inspectionEditGrid" ClipMode="ClipMode.EllipsisWithTooltip" DataSource="@Inspections" GridLines="GridLine.Both" AllowTextWrap="true" AllowSorting="true" AllowPaging="true" AllowFiltering="true" Toolbar="@SearchTool">
    <GridTextWrapSettings WrapMode="WrapMode.Header"></GridTextWrapSettings>
    <GridEditSettings Mode="EditMode.Dialog" AllowAdding="true" AllowEditing="true" AllowDeleting="true" Dialog="DialogParams"></GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSize="5" PageCount="4" PageSizes="@pagerDropdown"></GridPageSettings>
    <GridEvents OnActionBegin="ActionBeginHandler" TValue="InspectionDto"></GridEvents>
    <GridColumns>
        <GridColumn AllowAdding="false" Field="@nameof(InspectionDto.Id)" HeaderText="ID" Width="80"></GridColumn>
        <GridColumn Format="d" Field="@nameof(InspectionDto.InspectionDate)" HeaderText="Data przeglądu"></GridColumn>
        <GridColumn Field="@nameof(InspectionDto.InspectionFrequency)" HeaderText="Częstotliwość przeglądu" Width="200"></GridColumn>
        <GridColumn Field="@nameof(InspectionDto.Warranty)" HeaderText="Gwarancja"></GridColumn>
        <GridColumn Field="@nameof(InspectionDto.Scan)" HeaderText="Skan">
            <Template>
                @{
                    var inspection = (context as InspectionDto);
                    string name = inspection.Scan;
                }
                <div class="link">
                    <a href="@($"/PrivateFiles/{name}")">@name</a>
                </div>
            </Template>
            <EditTemplate>
                <label>Skan dokumentu</label>
                <SfUploader ID="file" AutoUpload="false" AllowMultiple="false">
                    <UploaderEvents Success=@OnSuccess></UploaderEvents>
                    <UploaderAsyncSettings SaveUrl="file" RemoveUrl="api/SampleData/Remove"></UploaderAsyncSettings>
                </SfUploader>
            </EditTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(InspectionDto.InspectionType)" HeaderText="Rodzaj przeglądu">
            <EditTemplate>
                <label>Rodzaj przeglądu</label>
                <SfDropDownList DataSource="@InspectionTypes" TItem="InspectionTypeDto" TValue="int" @bind-Value="@((context as InspectionDto).InspectionTypeId)">
                    <DropDownListEvents TItem="InspectionTypeDto" TValue="int" OnValueSelect="@ValueSelect"></DropDownListEvents>
                    <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
            </EditTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(InspectionDto.Service)" HeaderText="Serwisant" Width="200">
            <EditTemplate>
                <label>Serwisant</label>
                <SfDropDownList DataSource="@Services" TItem="ServiceDto" TValue="int" @bind-Value="@((context as InspectionDto).ServiceId)">
                    <DropDownListEvents TItem="ServiceDto" TValue="int" OnValueSelect="@ValueSelect"></DropDownListEvents>
                    <DropDownListFieldSettings Text="ServiceName" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
            </EditTemplate>
        </GridColumn>
        <GridColumn HeaderText="Akcje" Width="110">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions()
                     {
                        IconCss = "e-icons e-edit",
                         CssClass = "e-flat"
                     })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions()
                     {
                         IconCss = "e-icons e-delete",
                         CssClass = "e-flat"
                     })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>
<p style="padding-top: 10px">Zgłoszenia</p>
<SfGrid @ref="ticketEditGrid" ClipMode="ClipMode.EllipsisWithTooltip" DataSource="@Tickets" GridLines="GridLine.Both" AllowTextWrap="true" AllowSorting="true" AllowPaging="true" AllowFiltering="true" Toolbar="@SearchTool">
    <GridTextWrapSettings WrapMode="WrapMode.Header"></GridTextWrapSettings>
    <GridEditSettings Mode="EditMode.Dialog" AllowAdding="true" AllowEditing="true" AllowDeleting="true" Dialog="DialogParams"></GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSize="5" PageCount="4" PageSizes="@pagerDropdown"></GridPageSettings>
    <GridEvents CommandClicked="CommandClickHandler" OnActionBegin="ActionBeginHandler1" TValue="TicketDto"></GridEvents>
    <GridColumns>
        <GridColumn AllowAdding="false" Field="@nameof(TicketDto.Id)" HeaderText="ID" Width="80"></GridColumn>
        <GridColumn Format="d" Field="@nameof(TicketDto.TicketDate)" HeaderText="Data zgłoszenia"></GridColumn>
        <GridColumn Field="@nameof(TicketDto.TicketDescription)" HeaderText="Opis zgłoszenia" Width="200"></GridColumn>
        <GridColumn AllowAdding="false" AllowEditing="false" Field="@nameof(TicketDto.Notifier)" HeaderText="Zgłaszający"></GridColumn>
        <GridColumn Field="@nameof(TicketDto.TicketStatus)" HeaderText="Status">
            <EditTemplate>
                <label>Status zgłoszenia</label>
                <SfDropDownList DataSource="@TicketStatuses" TItem="TicketStatusDto" TValue="int" @bind-Value="@((context as TicketDto).TicketStatusId)">
                    <DropDownListEvents TItem="TicketStatusDto" TValue="int" OnValueSelect="@ValueSelect"></DropDownListEvents>
                    <DropDownListFieldSettings Text="StatusName" Value="Id"></DropDownListFieldSettings>
                </SfDropDownList>
            </EditTemplate>
        </GridColumn>
        <GridColumn HeaderText="Akcje" Width="165">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions()
                     {
                        IconCss = "e-icons e-edit",
                         CssClass = "e-flat"
                     })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions()
                     {
                         IconCss = "e-icons e-delete",
                         CssClass = "e-flat"
                     })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.None" ButtonOption="@(new CommandButtonOptions()
                     {
                         IconCss = "e-icons e-description",
                         CssClass = "e-flat"
                     })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>
<style>

    .e-grid .e-headercell {
        background-color: #00b4d8;
    }

    .e-headercell {
        color: white;
        font-size: 1.5rem;
        font-weight: bold;
    }
</style>

@code{
    [Parameter]
    public string DeviceId { get; set; }

    private DialogSettings DialogParams = new DialogSettings { Width = "550px" };

    public string[] pagerDropdown { get; set; } = new string[] { "5", "10", "15", "20" };

    public List<InspectionDto> Inspections { get; set; }
    public List<InspectionTypeDto> InspectionTypes { get; set; }
    public List<ServiceDto> Services { get; set; }
    public string deviceName { get; set; }
    InspectionTypeDto DropDownSelectedInspectionType = new InspectionTypeDto();
    ServiceDto DropDownSelectedService = new ServiceDto();
    public string filename;
    public string Username;

    public SfGrid<InspectionDto> inspectionEditGrid { get; set; }

    [Inject]
    public IInspectionService InspectionService { get; set; }

    [Inject]
    public IInspectionTypeService InspectionTypeService { get; set; }

    [Inject]
    public IServiceService ServiceService { get; set; }

    public List<TicketDto> Tickets { get; set; }
    public List<TicketStatusDto> TicketStatuses { get; set; }
    TicketStatusDto DropDownSelectedTicketStatus = new TicketStatusDto();

    public SfGrid<TicketDto> ticketEditGrid { get; set; }

    [Inject]
    public ITicketService TicketService { get; set; }

    [Inject]
    public ITicketStatusService TicketStatusService { get; set; }

    [Inject]
    public IDeviceService DeviceService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        Username = user.Identity.Name;
        int DevId = Int32.Parse(DeviceId);
        Inspections = (await InspectionService.GetInspectionByDevice(DevId)).ToList();
        InspectionTypes = (await InspectionTypeService.GetInspectionTypes()).ToList();
        Services = (await ServiceService.GetServices()).ToList();
        Tickets = (await TicketService.GetTicketByDevice(DevId)).ToList();
        TicketStatuses = (await TicketStatusService.GetTicketStatuses()).ToList();
        var deviceDto = (await DeviceService.GetDeviceById(DevId));
        deviceName = deviceDto.Name;

    }

    public void ValueSelect(Syncfusion.Blazor.DropDowns.SelectEventArgs<InspectionTypeDto> args)
    {
        DropDownSelectedInspectionType.Id = args.ItemData.Id;
    }
    public void ValueSelect(Syncfusion.Blazor.DropDowns.SelectEventArgs<ServiceDto> args)
    {
        DropDownSelectedService.Id = args.ItemData.Id;
    }
    public void ValueSelect(Syncfusion.Blazor.DropDowns.SelectEventArgs<TicketStatusDto> args)
    {
        DropDownSelectedTicketStatus.Id = args.ItemData.Id;
    }

    public void OnSuccess(SuccessEventArgs args)
    {
        filename = args.File.Name.ToString();
    }

    public void CommandClickHandler(CommandClickEventArgs<TicketDto> args)
    {
        if (args.CommandColumn.Type == CommandButtonType.None)
        {
             UriHelper.NavigateTo($"/devicedetails/{args.RowData.DeviceId}/tickets/{args.RowData.Id}/replies");
        }
        
    }

    public async void ActionBeginHandler(ActionEventArgs<InspectionDto> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add))
        {
            Args.Data.InspectionDate = DateTime.Now;
        }

        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            Args.Data = Args.PreviousData;
        }

        int DevId = Int32.Parse(DeviceId);

        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (Args.Action == "Add")
            {
                Args.Data.InspectionTypeId = DropDownSelectedInspectionType.Id;
                Args.Data.ServiceId = DropDownSelectedService.Id;
                Args.Data.Scan = filename;
                await InspectionService.AddInspection(Args.Data, DevId);
                Inspections = (await InspectionService.GetInspectionByDevice(DevId)).ToList();
                InspectionTypes = (await InspectionTypeService.GetInspectionTypes()).ToList();
                Services = (await ServiceService.GetServices()).ToList();
                inspectionEditGrid.Refresh();
            }
            else
            {
                Args.Data.Scan = filename;
                await InspectionService.UpdateInspection(Args.Data, DevId, Args.Data.Id);
                Inspections = (await InspectionService.GetInspectionByDevice(DevId)).ToList();
                InspectionTypes = (await InspectionTypeService.GetInspectionTypes()).ToList();
                Services = (await ServiceService.GetServices()).ToList();
                inspectionEditGrid.Refresh();
            }
        }
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await InspectionService.DeleteInspection(Args.Data.Id, DevId);
        }
    }
    public async void ActionBeginHandler1(ActionEventArgs<TicketDto> Args)
    {

        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add))
        {
            Args.Data.Notifier = Username;
            Args.Data.TicketDate = DateTime.Now;
            Args.Data.TicketStatusId = 1;
        }

        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.BeginEdit))
        {
            Args.Data = Args.PreviousData;
        }

        int DevId = Int32.Parse(DeviceId);

        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (Args.Action == "Add")
            {
                Args.Data.TicketStatusId = DropDownSelectedTicketStatus.Id;
                await TicketService.AddTicket(Args.Data, DevId);
                Tickets = (await TicketService.GetTicketByDevice(DevId)).ToList();
                TicketStatuses = (await TicketStatusService.GetTicketStatuses()).ToList();
                ticketEditGrid.Refresh();
            }
            else
            {
                Args.Data.Notifier = Username;
                await TicketService.UpdateTicket(Args.Data, DevId, Args.Data.Id);
                Tickets = (await TicketService.GetTicketByDevice(DevId)).ToList();
                TicketStatuses = (await TicketStatusService.GetTicketStatuses()).ToList();
                ticketEditGrid.Refresh();
            }
        }
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await TicketService.DeleteTicket(Args.Data.Id, DevId);
        }
    }
}