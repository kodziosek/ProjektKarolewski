@page "/producers"
@using BlazorFront.Models
@using ProjektKarolewski.Models
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using System;
@using System.IO;
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@attribute [Authorize(Roles = "Administrator, Manager")]



@{
    var SearchTool = new List<string>() { "Add", "Cancel", "Search" };
    System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo("pl");
}


<p style="padding-top: 10px">Zgłoszenia</p>
<SfGrid @ref="producerEditGrid" ClipMode="ClipMode.EllipsisWithTooltip" DataSource="@ProducerList" GridLines="GridLine.Both" AllowTextWrap="true" AllowSorting="true" AllowPaging="true" AllowFiltering="true" Toolbar="@SearchTool">
    <GridTextWrapSettings WrapMode="WrapMode.Header"></GridTextWrapSettings>
    <GridEditSettings Mode="EditMode.Dialog" AllowAdding="true" AllowEditing="true" AllowDeleting="true" Dialog="DialogParams"></GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSize="5" PageCount="4" PageSizes="@pagerDropdown"></GridPageSettings>
    <GridEvents OnActionBegin="ActionBeginHandler1" TValue="ProducerDto"></GridEvents>
    <GridColumns>
        <GridColumn AllowEditing="false" AllowAdding="false" Field="@nameof(ProducerDto.Id)" HeaderText="ID" Width="80"></GridColumn>
        <GridColumn Field="@nameof(ProducerDto.Name)" HeaderText="Nazwa producenta"></GridColumn>
        <GridColumn HeaderText="Akcje" Width="110">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions()
                     {
                        IconCss = "e-icons e-edit",
                         CssClass = "e-flat"
                     })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions()
                     {
                         IconCss = "e-icons e-delete",
                         CssClass = "e-flat"
                     })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>
<style>
    .e-grid .e-headercell {
        background-color: #00b4d8;
    }

    .e-headercell {
        color: white;
        font-size: 1.5rem;
        font-weight: bold;
    }
</style>

@code{

    private DialogSettings DialogParams = new DialogSettings { Width = "550px", MinHeight = "600px" };

    public string[] pagerDropdown { get; set; } = new string[] { "5", "10", "15", "20" };

    public string Username;


    public List<ProducerDto> ProducerList { get; set; }


    public SfGrid<ProducerDto> producerEditGrid { get; set; }

    [Inject]
    public IProducerService ProducerService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        Username = user.Identity.Name;
        ProducerList = (await ProducerService.GetProducers()).ToList();

    }


    public async void ActionBeginHandler1(ActionEventArgs<ProducerDto> Args)
    {




        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (Args.Action == "Add")
            {
                await ProducerService.AddProducer(Args.Data);
                ProducerList = (await ProducerService.GetProducers()).ToList();
                producerEditGrid.Refresh();
            }
            else
            {
                await ProducerService.UpdateProducer(Args.Data, Args.Data.Id);
                ProducerList = (await ProducerService.GetProducers()).ToList();
                producerEditGrid.Refresh();
            }
        }
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await ProducerService.DeleteProducer(Args.Data.Id);
            producerEditGrid.Refresh();

        }
    }
}