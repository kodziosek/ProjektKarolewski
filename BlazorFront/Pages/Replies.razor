@page "/devicedetails/{DeviceId}/tickets/{TicketId}/replies"
@using BlazorFront.Models
@using ProjektKarolewski.Models
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using System;
@using System.IO;
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@attribute [Authorize(Roles = "Administrator, Manager, User")]



@{
    var SearchTool = new List<string>() { "Add", "Cancel", "Search" };
    System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo("pl");
}


<p style="padding-top: 10px">Odpowiedzi</p>
<SfGrid @ref="replyEditGrid" ClipMode="ClipMode.EllipsisWithTooltip" DataSource="@Reply" GridLines="GridLine.Both" AllowTextWrap="true" AllowSorting="true" AllowPaging="true" AllowFiltering="true" Toolbar="@SearchTool">
    <GridTextWrapSettings WrapMode="WrapMode.Header"></GridTextWrapSettings>
    <GridEditSettings Mode="EditMode.Dialog" AllowAdding="true" AllowEditing="true" AllowDeleting="true" Dialog="DialogParams"></GridEditSettings>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
    <GridPageSettings PageSize="5" PageCount="4" PageSizes="@pagerDropdown"></GridPageSettings>
    <GridEvents OnActionBegin="ActionBeginHandler" TValue="ReplyDto"></GridEvents>
    <GridColumns>
        <GridColumn AllowAdding="false" Field="@nameof(ReplyDto.Id)" HeaderText="ID" Width="80"></GridColumn>
        <GridColumn Format="d" Field="@nameof(ReplyDto.ReplyDate)" HeaderText="Data odpowiedzi"></GridColumn>
        <GridColumn Field="@nameof(ReplyDto.ReplyDescription)" HeaderText="Treść odpowiedzi" Width="200"></GridColumn>
        <GridColumn Field="@nameof(ReplyDto.ReplyProtocol)" HeaderText="Skan">
            <Template>
                @{
                    var reply = (context as ReplyDto);
                    string name = reply.ReplyProtocol;
                }
                <div class="link">
                    <a href="@($"/PrivateFiles/{name}")">@name</a>
                </div>
            </Template>
            <EditTemplate>
                <label>Skan dokumentu</label>
                <SfUploader ID="file" AutoUpload="false" AllowMultiple="false">
                    <UploaderEvents Success=@OnSuccess></UploaderEvents>
                    <UploaderAsyncSettings SaveUrl="file" RemoveUrl="api/SampleData/Remove"></UploaderAsyncSettings>
                </SfUploader>
            </EditTemplate>
        </GridColumn>
        <GridColumn HeaderText="Akcje" Width="110">
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions()
                     {
                        IconCss = "e-icons e-edit",
                        CssClass = "e-flat"
                     })"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions()
                     {
                        IconCss = "e-icons e-delete",
                        CssClass = "e-flat"
                     })"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
    </GridColumns>
</SfGrid>
<style>
    .e-grid .e-headercell {
        background-color: #00b4d8;
    }

    .e-headercell {
        color: white;
        font-size: 1.5rem;
        font-weight: bold;
    }
</style>

@code{
    [Parameter]
    public string DeviceId { get; set; }
    [Parameter]
    public string TicketId { get; set; }

    private DialogSettings DialogParams = new DialogSettings { Width = "550px" };

    public string[] pagerDropdown { get; set; } = new string[] { "5", "10", "15", "20" };

    public string filename;
    public string Username;

    public List<TicketDto> Tickets { get; set; }
    public List<ReplyDto> Reply { get; set; }
    TicketStatusDto DropDownSelectedTicketStatus = new TicketStatusDto();

    public SfGrid<ReplyDto> replyEditGrid { get; set; }

    [Inject]
    public ITicketService TicketService { get; set; }

    [Inject]
    public IReplyService ReplyService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        Username = user.Identity.Name;
        int TickId = Int32.Parse(TicketId);
        int DevId = Int32.Parse(DeviceId);
        Reply = (await ReplyService.GetReplyByTicket(DevId, TickId)).ToList();
        Tickets = (await TicketService.GetTicketByDevice(DevId)).ToList();
    }

    public void OnSuccess(SuccessEventArgs args)
    {
        filename = args.File.Name.ToString();
    }

    public async void ActionBeginHandler(ActionEventArgs<ReplyDto> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Add))
        {
            Args.Data.ReplyDate = DateTime.Now;
        }


        int DevId = Int32.Parse(DeviceId);
        int TickId = Int32.Parse(TicketId);

        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (Args.Action == "Add")
            {
                Args.Data.ReplyProtocol = filename;
                await ReplyService.AddReply(Args.Data, DevId, TickId);
                Reply = (await ReplyService.GetReplyByTicket(DevId, TickId)).ToList();
                Tickets = (await TicketService.GetTicketByDevice(DevId)).ToList();
                replyEditGrid.Refresh();
            }
            else
            {
                await ReplyService.UpdateReply(Args.Data, DevId, TickId, Args.Data.Id);
                Reply = (await ReplyService.GetReplyByTicket(DevId, TickId)).ToList();
                Tickets = (await TicketService.GetTicketByDevice(DevId)).ToList();
                replyEditGrid.Refresh();
            }
        }
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await ReplyService.DeleteReply(TickId, DevId, Args.Data.Id);
            replyEditGrid.Refresh();
        }
    }
}